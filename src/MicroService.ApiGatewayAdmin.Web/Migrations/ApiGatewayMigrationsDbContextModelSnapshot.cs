// <auto-generated />
using System;
using MicroService.ApiGateway.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MicroService.ApiGatewayAdmin.Web.Migrations
{
    [DbContext(typeof(ApiGatewayMigrationsDbContext))]
    partial class ApiGatewayMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.AggregateReRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aggregator")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Priority");

                    b.Property<long>("ReRouteId");

                    b.Property<bool>("ReRouteIsCaseSensitive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ReRouteKeys")
                        .HasMaxLength(1000);

                    b.Property<string>("UpstreamHost")
                        .HasMaxLength(1000);

                    b.Property<string>("UpstreamPathTemplate")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("AbpApiGatewayAggregate");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.AggregateReRouteConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AggregateReRouteId");

                    b.Property<string>("JsonPath")
                        .HasMaxLength(256);

                    b.Property<string>("Parameter")
                        .HasMaxLength(1000);

                    b.Property<long>("ReRouteId");

                    b.Property<string>("ReRouteKey")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AggregateReRouteId");

                    b.ToTable("AbpApiGatewayAggregateConfig");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.AuthenticationOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllowedScopes")
                        .HasMaxLength(200);

                    b.Property<string>("AuthenticationProviderKey")
                        .HasMaxLength(100);

                    b.Property<long>("ReRouteId");

                    b.HasKey("Id");

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayAuthOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.CacheOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ReRouteId");

                    b.Property<string>("Region")
                        .HasMaxLength(256);

                    b.Property<int?>("TtlSeconds");

                    b.HasKey("Id");

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayCacheOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.DynamicReRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<long>("DynamicReRouteId");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AbpApiGatewayDynamicReRoute");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("DownstreamScheme")
                        .HasMaxLength(100);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ItemId");

                    b.Property<string>("RequestIdKey")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AbpApiGatewayGlobalConfiguration");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.Headers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<long>("ReRouteId");

                    b.Property<string>("Value")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AbpApiGatewayHeaders");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.HostAndPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Port")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<long>("ReRouteId");

                    b.HasKey("Id");

                    b.ToTable("AbpApiGatewayHostAndPort");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.HttpHandlerOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowAutoRedirect");

                    b.Property<long?>("ItemId");

                    b.Property<long?>("ReRouteId");

                    b.Property<bool>("UseCookieContainer");

                    b.Property<bool>("UseProxy");

                    b.Property<bool>("UseTracing");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayHttpOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.LoadBalancerOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Expiry");

                    b.Property<long?>("ItemId");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<long?>("ReRouteId");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayBalancerOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.QoSOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DurationOfBreak");

                    b.Property<int?>("ExceptionsAllowedBeforeBreaking");

                    b.Property<long?>("ItemId");

                    b.Property<long?>("ReRouteId");

                    b.Property<int?>("TimeoutValue");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayQoSOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.RateLimitOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientIdHeader")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("ClientId");

                    b.Property<bool>("DisableRateLimitHeaders");

                    b.Property<int?>("HttpStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(429);

                    b.Property<long>("ItemId");

                    b.Property<string>("QuotaExceededMessage")
                        .HasMaxLength(256);

                    b.Property<string>("RateLimitCounterPrefix")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("ocelot");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayRateLimitOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.RateLimitRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientWhitelist")
                        .HasMaxLength(1000);

                    b.Property<long?>("DynamicReRouteId");

                    b.Property<bool>("EnableRateLimiting");

                    b.Property<long?>("Limit");

                    b.Property<string>("Period")
                        .HasMaxLength(50);

                    b.Property<double?>("PeriodTimespan");

                    b.Property<long?>("ReRouteId");

                    b.HasKey("Id");

                    b.HasIndex("DynamicReRouteId")
                        .IsUnique();

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayRateLimitRule");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.ReRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddClaimsToRequest")
                        .HasMaxLength(1000);

                    b.Property<string>("AddHeadersToRequest")
                        .HasMaxLength(1000);

                    b.Property<string>("AddQueriesToRequest")
                        .HasMaxLength(1000);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<bool>("DangerousAcceptAnyServerCertificateValidator");

                    b.Property<string>("DelegatingHandlers")
                        .HasMaxLength(1000);

                    b.Property<string>("DownstreamHeaderTransform")
                        .HasMaxLength(1000);

                    b.Property<string>("DownstreamHostAndPorts")
                        .HasMaxLength(1000);

                    b.Property<string>("DownstreamPathTemplate")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("DownstreamScheme")
                        .HasMaxLength(100);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<int?>("Priority");

                    b.Property<long>("ReRouteId");

                    b.Property<bool>("ReRouteIsCaseSensitive");

                    b.Property<string>("ReRouteName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RequestIdKey")
                        .HasMaxLength(100);

                    b.Property<string>("RouteClaimsRequirement")
                        .HasMaxLength(1000);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100);

                    b.Property<int?>("Timeout");

                    b.Property<string>("UpstreamHeaderTransform")
                        .HasMaxLength(1000);

                    b.Property<string>("UpstreamHost")
                        .HasMaxLength(100);

                    b.Property<string>("UpstreamHttpMethod")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpstreamPathTemplate")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DownstreamPathTemplate", "UpstreamPathTemplate")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayReRoute");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.SecurityOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IPAllowedList")
                        .HasMaxLength(1000);

                    b.Property<string>("IPBlockedList")
                        .HasMaxLength(1000);

                    b.Property<long>("ReRouteId");

                    b.HasKey("Id");

                    b.HasIndex("ReRouteId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewaySecurityOptions");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.ServiceDiscoveryProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigurationKey")
                        .HasMaxLength(256);

                    b.Property<string>("Host")
                        .HasMaxLength(50);

                    b.Property<long>("ItemId");

                    b.Property<string>("Namespace")
                        .HasMaxLength(128);

                    b.Property<int?>("PollingInterval");

                    b.Property<int?>("Port");

                    b.Property<string>("Token")
                        .HasMaxLength(256);

                    b.Property<string>("Type")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayDiscovery");
                });

            modelBuilder.Entity("MicroService.ApiGatewayAdmin.Entites.Ocelot.Cluster.ServerAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("ServerId");

                    b.HasKey("Id");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayServerAuth");
                });

            modelBuilder.Entity("MicroService.ApiGatewayAdmin.Entites.Ocelot.Cluster.ServerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<int>("ConfigType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Port")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(80);

                    b.Property<int?>("ServerAuthId");

                    b.Property<long>("ServerId");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ServerAuthId");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("AbpApiGatewayServerInfo");
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.AggregateReRouteConfig", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.AggregateReRoute")
                        .WithMany("ReRouteKeysConfig")
                        .HasForeignKey("AggregateReRouteId");
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.AuthenticationOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("AuthenticationOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.AuthenticationOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.CacheOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("CacheOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.CacheOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.HttpHandlerOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "GlobalConfiguration")
                        .WithOne("HttpHandlerOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.HttpHandlerOptions", "ItemId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("HttpHandlerOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.HttpHandlerOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.LoadBalancerOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "GlobalConfiguration")
                        .WithOne("LoadBalancerOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.LoadBalancerOptions", "ItemId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("LoadBalancerOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.LoadBalancerOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.QoSOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "GlobalConfiguration")
                        .WithOne("QoSOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.QoSOptions", "ItemId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("QoSOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.QoSOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.RateLimitOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "GlobalConfiguration")
                        .WithOne("RateLimitOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.RateLimitOptions", "ItemId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.RateLimitRule", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.DynamicReRoute", "DynamicReRoute")
                        .WithOne("RateLimitRule")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.RateLimitRule", "DynamicReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.DynamicReRoute", "DynamicReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("RateLimitOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.RateLimitRule", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.SecurityOptions", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRoute")
                        .WithOne("SecurityOptions")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.SecurityOptions", "ReRouteId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.ReRoute", "ReRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGateway.Entites.Ocelot.ServiceDiscoveryProvider", b =>
                {
                    b.HasOne("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "GlobalConfiguration")
                        .WithOne("ServiceDiscoveryProvider")
                        .HasForeignKey("MicroService.ApiGateway.Entites.Ocelot.ServiceDiscoveryProvider", "ItemId")
                        .HasPrincipalKey("MicroService.ApiGateway.Entites.Ocelot.GlobalConfiguration", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MicroService.ApiGatewayAdmin.Entites.Ocelot.Cluster.ServerInfo", b =>
                {
                    b.HasOne("MicroService.ApiGatewayAdmin.Entites.Ocelot.Cluster.ServerAuth", "ServerAuth")
                        .WithMany()
                        .HasForeignKey("ServerAuthId");
                });
#pragma warning restore 612, 618
        }
    }
}
